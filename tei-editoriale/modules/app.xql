xquery version "3.1";

module namespace app="http://exist-db.org/apps/tei-editoriale/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/tei-editoriale/config" at "config.xqm";
import module namespace kwic = "http://exist-db.org/xquery/kwic" at "resource:org/exist/xquery/lib/kwic.xql";
import module namespace lev="http://exist-db.org/apps/tei-editoriale/modules" at "lev.xql";

declare namespace tei="http://www.tei-c.org/ns/1.0";
declare namespace functx = 'http://www.functx.com';

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:toc($node as node(), $model as map(*)) {
    for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
        return
        <li>
            <a href="{app:hrefToDoc($doc)}">{$doc//tei:title/text()}</a>
        </li>   
};

declare function app:XMLtoHTML ($node as node(), $model as map (*), $query as xs:string?) {
let $ref := xs:string(request:get-parameter("document", ""))
let $xmlPath := concat(xs:string(request:get-parameter("directory", "data")), '/')
let $xml := doc(replace(concat($config:app-root, '/', $xmlPath, '/', $ref), '/exist/', '/db/'))
let $xslPath := concat(xs:string(request:get-parameter("stylesheet", "xmlToHtml")), '.xsl')
let $xsl := doc(replace(concat($config:app-root,'/resources/xslt/', $xslPath), '/exist/', '/db/'))
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};

declare function app:presentation ($node as node(), $model as map (*)) {
let $xml := doc(replace(concat($config:app-root, '/presentation.xml'), '/exist/', '/db/'))
let $xsl := doc(replace(concat($config:app-root,'/resources/xslt/presentation.xsl'), '/exist/', '/db/'))
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>
return
    transform:transform($xml, $xsl, $params)
};


declare function functx:substring-after-last($arg as xs:string?, $delim as xs:string)  as xs:string {
    replace ($arg,concat('^.*',$delim),'')
};
 
declare function app:ft_search($node as node(), $model as map (*)) {
    if (request:get-parameter("searchexpr", "") !="") then
    let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
    for $hit in collection(concat($config:app-root, '/data/'))//tei:p[ft:query(.,$searchterm)]
       let $href := app:hrefToDoc($hit)
       let $score as xs:float := ft:score($hit)
       order by $score descending
       return
       <tr>
           <td>{$score}</td>
           <td>{kwic:summarize($hit, <config width="40" link="{$href}" />)}</td>
           <td>{doc(concat($config:app-root, '/data/', app:getDocName($hit)))//tei:title/text()}</td>
       </tr>
    else
       <div>Aucun mot n'a été saisi.</div>
};

declare function app:nb_hits($node as node(), $model as map (*))as element(p) {
    if (request:get-parameter("searchexpr", "") !="") then
    let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
    let $cnt := count(collection(concat($config:app-root, '/data/'))//tei:p[ft:query(.,$searchterm)])
    return
    <p>{$cnt} résultats pour le mot <b>{$searchterm}</b></p>
    else
        <p></p>
};


declare function app:getDocName($node as node()){
    let $name := functx:substring-after-last(document-uri(root($node)), '/')
    return $name
};

declare function app:hrefToDoc($node as node()){
    let $name := functx:substring-after-last($node, '/')
    let $href := concat('show.html','?document=', app:getDocName($node))
        return $href
};

declare function app:search_title($node as node(), $model as map(*), $querytitle as xs:string?) {
        let $query := lower-case($querytitle)
        for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
        let $title := lower-case($doc//tei:title/text())
        where lev:levenshtein-distance($query, $title) < 3
        return
            <li>
                <a href="{app:hrefToDoc($doc)}">{$doc//tei:title/text()}</a>
            </li>
};

declare function app:search_author($node as node(), $model as map(*), $queryauthor as xs:string?) {
        let $query := lower-case(functx:substring-after-last($queryauthor, ' '))
        for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
        let $author := lower-case(functx:substring-after-last($doc//tei:author/text(), ' '))
        where lev:levenshtein-distance($query, $author) < 2
        return
            <li>
                <a href="{app:hrefToDoc($doc)}">{$doc//tei:title/text()}</a>
            </li>
};

declare function app:search_year($node as node(), $model as map(*), $queryyear as xs:string?) {
        for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
        let $year := $doc//tei:creation/tei:date/text()
        where $queryyear eq $year
        return
            <li>
                <a href="{app:hrefToDoc($doc)}">{$doc//tei:title/text()}</a>
            </li>
};


declare function app:all_search($node as node(), $model as map(*), $meta_info as xs:string?, $meta_type as xs:boolean?) {
    if (request:get-parameter("searchexpr", "") !="") then
        if ($meta_type)  then
            if ($meta_type = 'titre') then
                let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
                let $query := lower-case($meta_info)
                for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
                let $title := lower-case($doc//tei:title/text())
                where lev:levenshtein-distance($query, $title) < 3
                return app:getKwic($doc, $searchterm)
            else if ($meta_type = 'auteur') then
                let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
                let $query := lower-case(functx:substring-after-last($meta_info, ' '))
                for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
                let $author := lower-case(functx:substring-after-last($doc//tei:author/text(), ' '))
                where lev:levenshtein-distance($query, $author) < 2
                return app:getKwic($doc, $searchterm)
            else
                let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
                for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
                let $year := $doc//tei:creation/tei:date/text()
                where $meta_info eq $year
                return app:getKwic($doc, $searchterm)
        else
        let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
        for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
            return app:getKwic($doc, $searchterm)
    else
        <div>Aucun mot n'a été saisi.</div>
};

declare function app:getKwic($doc, $searchterm as xs:string) {
    for $hit in $doc//tei:p[ft:query(., $searchterm)]
    let $href := app:hrefToDoc($hit)
    let $score as xs:float := ft:score($hit)
    order by $score descending
    return
    <tr>
        <td>{$score}</td>
        <td>{kwic:summarize($hit, <config width="40" link="{$href}" />)}</td>
        <td>{doc(concat($config:app-root, '/data/', app:getDocName($hit)))//tei:title/text()}</td>
    </tr>
};